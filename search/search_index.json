{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#gocore","title":"GoCore","text":"<p>This is an \"all-in-one\" library package in Go that contains all sorts of utilities, helpers, structs that can be used in variety of places. I am using it extensively in my homelab stuff.</p> <p>Should certain part of gocore get sizable enough, it will likely be split into its own package. The aim is to let things grow organically and see what needs splitting rather than split pre-emptively stupid number of repos unnecessarily.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>The hope is to use as few dependencies as possible. In particular the following are used now:</p>"},{"location":"#http-web-framework-of-choice-nethttp","title":"Http web framework of choice: net/http","text":"<p>The net/http is fast and powerful, its not as fast as fiber I don't think but fiber comes with bunch of compromises of its own, in particular if you need something so fast that net/http is not enough for you, you should probably roll something specific to that task anyway. net/http is a standard library.</p>"},{"location":"#logging-framework-of-choice-slog","title":"Logging framework of choice: slog","text":"<p>Slog is fantastic logging package that I think is either the fastest or nearly the fastest, its super easy to use, and has a lot of support. Is the be all and end all, maybe not, but I'd rather settle on something rather than have 3 different logging frameworks lying around. Slog is also coming by default as a standard package now which is very nice.</p>"},{"location":"#utilities-package-lo","title":"Utilities package: lo","text":"<p>It comes with crazy number of utilities that I find myself using all the time. It's a bit of a kitchen sink but I like it. If writing a utility function check if its not in lo already. lo/parallel is also supported. This is not a standard library.</p>"},{"location":"Utils/","title":"Utils","text":""},{"location":"Utils/#utils","title":"utils","text":"<pre><code>import \"github.com/atropos112/gocore/utils\"\n</code></pre>"},{"location":"Utils/#index","title":"Index","text":"<ul> <li>func ArrContains[T constraints.Ordered](arr []T, obj T) bool</li> <li>func ArrContainsArr[T constraints.Ordered](arr []T, subArr []T) bool</li> <li>func GetCred(value string) (string, error)</li> <li>func GetCredUnsafe(value string) string</li> <li>func GetInitLogger() *slog.Logger</li> <li>func MakeAPIRequest(client *http.Client, kind, apiBaseURL, endpoint, token string, request, response interface{}) error</li> <li>func MakeDeleteRequest(client *http.Client, apiBaseURL, endpoint, token string, response interface{}) error</li> <li>func MakeGetRequest(client *http.Client, apiBaseURL, endpoint, token string, response interface{}) error</li> <li>func MakePostRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response interface{}) error</li> <li>func MakePutRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response interface{}) error</li> <li>func RunAPIServer(port int)</li> <li>type APIError</li> <li>func (e *APIError) Error() string</li> <li>type AuthenticatedAPIClient</li> <li>func NewAPIClient(baseURL, token string) AuthenticatedAPIClient</li> <li>func (c *AuthenticatedAPIClient) Delete(endpoint string, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Get(endpoint string, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Post(endpoint string, request, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Put(endpoint string, request, response interface{}) error</li> <li>type DeveloperError</li> <li>func (e *DeveloperError) Error() string</li> <li>type GPTDoesntListenError</li> <li>func (e *GPTDoesntListenError) Error() string</li> <li>type NoCredFoundError</li> <li>func (e *NoCredFoundError) Error() string</li> </ul>"},{"location":"Utils/#func-arrcontains","title":"func ArrContains","text":"<pre><code>func ArrContains[T constraints.Ordered](arr []T, obj T) bool\n</code></pre> <p>ArrContains checks if an array contains obj</p> <p></p>"},{"location":"Utils/#func-arrcontainsarr","title":"func ArrContainsArr","text":"<pre><code>func ArrContainsArr[T constraints.Ordered](arr []T, subArr []T) bool\n</code></pre> <p>ArrContainsArr checks if an array contains all elements of another array</p> <p></p>"},{"location":"Utils/#func-getcred","title":"func GetCred","text":"<pre><code>func GetCred(value string) (string, error)\n</code></pre> <p>GetCred is a function that gets a credential from the environment variables. If the credential is not found, it will return an error.</p> <p></p>"},{"location":"Utils/#func-getcredunsafe","title":"func GetCredUnsafe","text":"<pre><code>func GetCredUnsafe(value string) string\n</code></pre> <p>GetCredUnsafe is a function that gets a credential from the environment variables. If the credential is not found, it will log a fatal error.</p> <p></p>"},{"location":"Utils/#func-getinitlogger","title":"func GetInitLogger","text":"<pre><code>func GetInitLogger() *slog.Logger\n</code></pre> <p>Initializes a new josn logger and sets it as the default logger</p> <p></p>"},{"location":"Utils/#func-makeapirequest","title":"func MakeAPIRequest","text":"<pre><code>func MakeAPIRequest(client *http.Client, kind, apiBaseURL, endpoint, token string, request, response interface{}) error\n</code></pre> <p>MakeAPIRequest is a generic function to make an API request. It supports GET, POST, PUT, and DELETE requests.</p> <p></p>"},{"location":"Utils/#func-makedeleterequest","title":"func MakeDeleteRequest","text":"<pre><code>func MakeDeleteRequest(client *http.Client, apiBaseURL, endpoint, token string, response interface{}) error\n</code></pre> <p>MakeDeleteRequest is a helper function to make a DELETE request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makegetrequest","title":"func MakeGetRequest","text":"<pre><code>func MakeGetRequest(client *http.Client, apiBaseURL, endpoint, token string, response interface{}) error\n</code></pre> <p>MakeGetRequest is a helper function to make a GET request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makepostrequest","title":"func MakePostRequest","text":"<pre><code>func MakePostRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response interface{}) error\n</code></pre> <p>MakePostRequest is a helper function to make a POST request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makeputrequest","title":"func MakePutRequest","text":"<pre><code>func MakePutRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response interface{}) error\n</code></pre> <p>MakePutRequest is a helper function to make a PUT request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-runapiserver","title":"func RunAPIServer","text":"<pre><code>func RunAPIServer(port int)\n</code></pre> <p>RunAPIServer attaches logging middleware to the default http server and starts it on the specified port.</p> <p></p>"},{"location":"Utils/#type-apierror","title":"type APIError","text":"<p>APIError is an error type that is returned when an API request fails.</p> <pre><code>type APIError struct {\n    StatusCode int\n    Message    string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-apierror-error","title":"func (*APIError) Error","text":"<pre><code>func (e *APIError) Error() string\n</code></pre>"},{"location":"Utils/#type-authenticatedapiclient","title":"type AuthenticatedAPIClient","text":"<p>AuthenticatedAPIClient is a struct that contains the base URL of the API and the token to use for requests.</p> <pre><code>type AuthenticatedAPIClient struct {\n    BaseURL string\n    Token   string\n    Client  *http.Client\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-newapiclient","title":"func NewAPIClient","text":"<pre><code>func NewAPIClient(baseURL, token string) AuthenticatedAPIClient\n</code></pre> <p>NewAPIClient creates a new AuthenticatedAPIClient with the specified base URL and token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-delete","title":"func (*AuthenticatedAPIClient) Delete","text":"<pre><code>func (c *AuthenticatedAPIClient) Delete(endpoint string, response interface{}) error\n</code></pre> <p>Delete is a helper function to make a DELETE request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-get","title":"func (*AuthenticatedAPIClient) Get","text":"<pre><code>func (c *AuthenticatedAPIClient) Get(endpoint string, response interface{}) error\n</code></pre> <p>Get is a helper function to make a GET request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-post","title":"func (*AuthenticatedAPIClient) Post","text":"<pre><code>func (c *AuthenticatedAPIClient) Post(endpoint string, request, response interface{}) error\n</code></pre> <p>Post is a helper function to make a POST request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-put","title":"func (*AuthenticatedAPIClient) Put","text":"<pre><code>func (c *AuthenticatedAPIClient) Put(endpoint string, request, response interface{}) error\n</code></pre> <p>Put is a helper function to make a PUT request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#type-developererror","title":"type DeveloperError","text":"<p>DeveloperError represents an error that is caused by a developer mistake</p> <pre><code>type DeveloperError struct {\n    Message string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-developererror-error","title":"func (*DeveloperError) Error","text":"<pre><code>func (e *DeveloperError) Error() string\n</code></pre>"},{"location":"Utils/#type-gptdoesntlistenerror","title":"type GPTDoesntListenError","text":"<p>GPTDoesntListenError represents an error when GPT doesn't listen</p> <pre><code>type GPTDoesntListenError struct {\n    UserMessage string\n    SysMessage  string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-gptdoesntlistenerror-error","title":"func (*GPTDoesntListenError) Error","text":"<pre><code>func (e *GPTDoesntListenError) Error() string\n</code></pre>"},{"location":"Utils/#type-nocredfounderror","title":"type NoCredFoundError","text":"<p>NoCredFoundError represents an error when no credentials are found</p> <pre><code>type NoCredFoundError struct {\n    CredentialName string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-nocredfounderror-error","title":"func (*NoCredFoundError) Error","text":"<pre><code>func (e *NoCredFoundError) Error() string\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"Vikunja/","title":"Vikunja","text":""},{"location":"Vikunja/#vikunja","title":"vikunja","text":"<pre><code>import \"github.com/atropos112/gocore/vikunja\"\n</code></pre>"},{"location":"Vikunja/#index","title":"Index","text":"<ul> <li>func ConsumeWebhookCallback(body io.ReadCloser, callback func(webhook WebhookCallback) error) error</li> <li>func RegisterVikunjaWebhookHandler(path string, callback func(Webhook WebhookCallback, c *Client) error) error</li> <li>type Client</li> <li>func GetVikunjaAPIClient(token, apiURL string) (*Client, error)</li> <li>func (c *Client) AddLabelToTask(taskID, labelID int) (LabelID, error)</li> <li>func (c *Client) CreateProjectWebhook(projectID int, webhook Webhook) (Webhook, error)</li> <li>func (c *Client) DeleteProjectWebhook(projectID, webhookID int) (Webhook, error)</li> <li>func (c *Client) GetAllLabels() ([]Label, error)</li> <li>func (c *Client) GetProject(projectID int) (Project, error)</li> <li>func (c *Client) GetProjectTasks(projectID int) ([]Task, error)</li> <li>func (c *Client) GetProjectWebhooks(projectID int) ([]Webhook, error)</li> <li>func (c *Client) GetProjects() ([]Project, error)</li> <li>func (c *Client) GetTask(taskID int) (Task, error)</li> <li>func (c *Client) GetTaskComments(taskID int) ([]Comment, error)</li> <li>func (c *Client) GetUsersOnAProject(projectID int) ([]User, error)</li> <li>func (c *Client) UpdateProject(project Project) (Project, error)</li> <li>func (c *Client) UpdateProjectWebhook(projectID int, webhook Webhook) (Webhook, error)</li> <li>func (c *Client) UpdateTask(task Task) (Task, error)</li> <li>type Comment</li> <li>func GetLatestComment(comments []Comment) (Comment, error)</li> <li>type Label</li> <li>func LabelsWithGivenTitles(labels []Label, titles []string) ([]Label, error)</li> <li>type LabelID</li> <li>type Project</li> <li>type Task</li> <li>type User</li> <li>type VikunjaWebhookEventType</li> <li>type Webhook</li> <li>type WebhookCallback</li> <li>type WebhookCallbackData</li> </ul>"},{"location":"Vikunja/#func-consumewebhookcallback","title":"func ConsumeWebhookCallback","text":"<pre><code>func ConsumeWebhookCallback(body io.ReadCloser, callback func(webhook WebhookCallback) error) error\n</code></pre> <p>ConsumeWebhookCallback consumes a webhook callback and calls the callback function</p> <p></p>"},{"location":"Vikunja/#func-registervikunjawebhookhandler","title":"func RegisterVikunjaWebhookHandler","text":"<pre><code>func RegisterVikunjaWebhookHandler(path string, callback func(Webhook WebhookCallback, c *Client) error) error\n</code></pre> <p>RegisterVikunjaWebhookHandler registers a webhook handler for Vikunja Webhook</p> <p>Typical usage is something like: l := utils.GetInitLogger()</p> <pre><code>if err := vikunja.RegisterVikunjaWebhookHandler(\"/\", SomeWebhookHandler); err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>utils.RunAPIServer(8080)</p> <p></p>"},{"location":"Vikunja/#type-client","title":"type Client","text":"<p>Client is the interface for the Vikunja API client</p> <pre><code>type Client utils.AuthenticatedAPIClient\n</code></pre> <p></p>"},{"location":"Vikunja/#func-getvikunjaapiclient","title":"func GetVikunjaAPIClient","text":"<pre><code>func GetVikunjaAPIClient(token, apiURL string) (*Client, error)\n</code></pre> <p>GetVikunjaAPIClient returns a new Vikunja API client</p> <p></p>"},{"location":"Vikunja/#func-client-addlabeltotask","title":"func (*Client) AddLabelToTask","text":"<pre><code>func (c *Client) AddLabelToTask(taskID, labelID int) (LabelID, error)\n</code></pre> <p>AddLabelToTask adds a label to a task</p> <p></p>"},{"location":"Vikunja/#func-client-createprojectwebhook","title":"func (*Client) CreateProjectWebhook","text":"<pre><code>func (c *Client) CreateProjectWebhook(projectID int, webhook Webhook) (Webhook, error)\n</code></pre> <p>CreateProjectWebhook creates a webhook for a project</p> <p></p>"},{"location":"Vikunja/#func-client-deleteprojectwebhook","title":"func (*Client) DeleteProjectWebhook","text":"<pre><code>func (c *Client) DeleteProjectWebhook(projectID, webhookID int) (Webhook, error)\n</code></pre> <p>DeleteProjectWebhook deletes a webhook for a project</p> <p></p>"},{"location":"Vikunja/#func-client-getalllabels","title":"func (*Client) GetAllLabels","text":"<pre><code>func (c *Client) GetAllLabels() ([]Label, error)\n</code></pre> <p>GetAllLabels returns a list of labels for a task</p> <p></p>"},{"location":"Vikunja/#func-client-getproject","title":"func (*Client) GetProject","text":"<pre><code>func (c *Client) GetProject(projectID int) (Project, error)\n</code></pre> <p>GetProject returns a specific project</p> <p></p>"},{"location":"Vikunja/#func-client-getprojecttasks","title":"func (*Client) GetProjectTasks","text":"<pre><code>func (c *Client) GetProjectTasks(projectID int) ([]Task, error)\n</code></pre> <p>GetProjectTasks returns a list of tasks for a project</p> <p></p>"},{"location":"Vikunja/#func-client-getprojectwebhooks","title":"func (*Client) GetProjectWebhooks","text":"<pre><code>func (c *Client) GetProjectWebhooks(projectID int) ([]Webhook, error)\n</code></pre> <p>GetProjectWebhooks returns a list of webhooks for a project</p> <p></p>"},{"location":"Vikunja/#func-client-getprojects","title":"func (*Client) GetProjects","text":"<pre><code>func (c *Client) GetProjects() ([]Project, error)\n</code></pre> <p>GetProjects returns a list of projects</p> <p></p>"},{"location":"Vikunja/#func-client-gettask","title":"func (*Client) GetTask","text":"<pre><code>func (c *Client) GetTask(taskID int) (Task, error)\n</code></pre> <p>GetTask returns a task</p> <p></p>"},{"location":"Vikunja/#func-client-gettaskcomments","title":"func (*Client) GetTaskComments","text":"<pre><code>func (c *Client) GetTaskComments(taskID int) ([]Comment, error)\n</code></pre> <p>GetTaskComments returns a list of comments for a task</p> <p></p>"},{"location":"Vikunja/#func-client-getusersonaproject","title":"func (*Client) GetUsersOnAProject","text":"<pre><code>func (c *Client) GetUsersOnAProject(projectID int) ([]User, error)\n</code></pre> <p>GetUsersOnAProject returns a list of users added to a project</p> <p></p>"},{"location":"Vikunja/#func-client-updateproject","title":"func (*Client) UpdateProject","text":"<pre><code>func (c *Client) UpdateProject(project Project) (Project, error)\n</code></pre> <p>UpdateProject updates a project</p> <p></p>"},{"location":"Vikunja/#func-client-updateprojectwebhook","title":"func (*Client) UpdateProjectWebhook","text":"<pre><code>func (c *Client) UpdateProjectWebhook(projectID int, webhook Webhook) (Webhook, error)\n</code></pre> <p>UpdateProjectWebhook updates a webhook for a project, only can update events (nothing else)</p> <p></p>"},{"location":"Vikunja/#func-client-updatetask","title":"func (*Client) UpdateTask","text":"<pre><code>func (c *Client) UpdateTask(task Task) (Task, error)\n</code></pre> <p>UpdateTask updates a task</p> <p></p>"},{"location":"Vikunja/#type-comment","title":"type Comment","text":"<pre><code>type Comment struct {\n    ID      int    `json:\"id\"`\n    Comment string `json:\"comment\"`\n    Author  User   `json:\"author\"`\n    Created string `json:\"created\"`\n    Updated string `json:\"updated\"`\n}\n</code></pre>"},{"location":"Vikunja/#func-getlatestcomment","title":"func GetLatestComment","text":"<pre><code>func GetLatestComment(comments []Comment) (Comment, error)\n</code></pre> <p>GetLatestComment returns the latest comment from a list of comments</p> <p></p>"},{"location":"Vikunja/#type-label","title":"type Label","text":"<pre><code>type Label struct {\n    ID          int    `json:\"id\"`\n    Title       string `json:\"title\"`\n    Description string `json:\"description\"`\n    HexColor    string `json:\"hex_color\"`\n    CreatedBy   User   `json:\"created_by\"`\n    Created     string `json:\"created\"`\n    Updated     string `json:\"updated\"`\n}\n</code></pre>"},{"location":"Vikunja/#func-labelswithgiventitles","title":"func LabelsWithGivenTitles","text":"<pre><code>func LabelsWithGivenTitles(labels []Label, titles []string) ([]Label, error)\n</code></pre> <p>LabelsWithGivenTitles returns a list of labels with the given titles If the title of a label is not found, an error is returned, it is expected that you only provide valid titles</p> <p></p>"},{"location":"Vikunja/#type-labelid","title":"type LabelID","text":"<p>LabelID is a struct used to communicate to vikunja which label you are after. It is not the ID field in Label though.</p> <pre><code>type LabelID struct {\n    ID      int    `json:\"label_id\"`\n    Created string `json:\"created,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-project","title":"type Project","text":"<p>Project is a struct that represents a project in Vikunja</p> <pre><code>type Project struct {\n    ID                    int         `json:\"id\"`\n    Title                 string      `json:\"title\"`\n    HexColor              string      `json:\"hex_color\"`\n    BackgroundBlurHash    string      `json:\"background_blur_hash\"`\n    Position              float64     `json:\"position\"`\n    Created               string      `json:\"created\"`\n    Updated               string      `json:\"updated\"`\n    Description           string      `json:\"description\"`\n    DefaultBucketID       int         `json:\"default_bucket_id\"`\n    DoneBucketID          int         `json:\"done_bucket_id\"`\n    Identifier            string      `json:\"identifier\"`\n    IsArchived            bool        `json:\"is_archived\"`\n    IsFavorite            bool        `json:\"is_favorite\"`\n    Owner                 User        `json:\"owner\"`\n    ParentProjectID       int         `json:\"parent_project_id\"`\n    BackgroundInformation interface{} `json:\"background_information\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-task","title":"type Task","text":"<p>Task represents a task in Vikunja</p> <pre><code>type Task struct {\n    ID                     int                      `json:\"id\"`\n    Title                  string                   `json:\"title\"`\n    Description            string                   `json:\"description\"`\n    Done                   bool                     `json:\"done\"`\n    DoneAt                 string                   `json:\"done_at\"`\n    DueDate                string                   `json:\"due_date\"`\n    Reminders              interface{}              `json:\"reminders\"`\n    ProjectID              int                      `json:\"project_id\"`\n    RepeatAfter            int                      `json:\"repeat_after\"`\n    RepeatMode             int                      `json:\"repeat_mode\"`\n    Priority               int                      `json:\"priority\"`\n    StartDate              string                   `json:\"start_date\"`\n    EndDate                string                   `json:\"end_date\"`\n    Assignees              []User                   `json:\"assignees\"`\n    Labels                 []Label                  `json:\"labels\"`\n    HexColor               string                   `json:\"hex_color\"`\n    PercentDone            int                      `json:\"percent_done\"`\n    Identifier             string                   `json:\"identifier\"`\n    Index                  int                      `json:\"index\"`\n    RelatedTasks           map[string][]interface{} `json:\"related_tasks,omitempty\"` // Marking this with []Task instead of interface{} causes parsing errors...\n    Attachments            interface{}              `json:\"attachments\"`\n    CoverImageAttachmentID int                      `json:\"cover_image_attachment_id\"`\n    IsFavorite             bool                     `json:\"is_favorite\"`\n    Created                string                   `json:\"created\"`\n    Updated                string                   `json:\"updated\"`\n    BucketID               int                      `json:\"bucket_id\"`\n    Position               float64                  `json:\"position\"`\n    KanbanPosition         float64                  `json:\"kanban_position\"`\n    CreatedBy              User                     `json:\"created_by\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-user","title":"type User","text":"<p>User is a struct that represents a user in Vikunja</p> <pre><code>type User struct {\n    ID       int    `json:\"id\"`\n    Name     string `json:\"name\"`\n    Username string `json:\"username\"`\n    Created  string `json:\"created\"`\n    Updated  string `json:\"updated\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-vikunjawebhookeventtype","title":"type VikunjaWebhookEventType","text":"<pre><code>type VikunjaWebhookEventType string\n</code></pre> <pre><code>const (\n    ProjectDeleted        VikunjaWebhookEventType = \"project.deleted\"\n    TaskAssigneeCreated   VikunjaWebhookEventType = \"task.assignee.created\"\n    TaskCommentCreated    VikunjaWebhookEventType = \"task.comment.created\"\n    TaskDeleted           VikunjaWebhookEventType = \"task.deleted\"\n    TaskRelationCreated   VikunjaWebhookEventType = \"task.relation.created\"\n    TaskCommentDeleted    VikunjaWebhookEventType = \"task.comment.deleted\"\n    TaskAssigneeDeleted   VikunjaWebhookEventType = \"task.assignee.deleted\"\n    ProjectSharedTeam     VikunjaWebhookEventType = \"project.shared.team\"\n    ProjectSharedUser     VikunjaWebhookEventType = \"project.shared.user\"\n    TaskAttachmentCreated VikunjaWebhookEventType = \"task.attachment.created\"\n    TaskCommentEdited     VikunjaWebhookEventType = \"task.comment.edited\"\n    TaskRelationDeleted   VikunjaWebhookEventType = \"task.relation.deleted\"\n    TaskUpdated           VikunjaWebhookEventType = \"task.updated\"\n    TaskCreated           VikunjaWebhookEventType = \"task.created\"\n    TaskAttachmentDeleted VikunjaWebhookEventType = \"task.attachment.deleted\"\n    ProjectUpdated        VikunjaWebhookEventType = \"project.updated\"\n)\n</code></pre>"},{"location":"Vikunja/#type-webhook","title":"type Webhook","text":"<p>Webhook represents a webhook in Vikunja</p> <pre><code>type Webhook struct {\n    ID        int      `json:\"id\"`\n    TargetURL string   `json:\"target_url\"`\n    Events    []string `json:\"events\"`\n    ProjectID int      `json:\"project_id\"`\n    Secret    *string  `json:\"secret,omitempty\"`\n    Created   *string  `json:\"created,omitempty\"`\n    Updated   *string  `json:\"updated,omitempty\"`\n    CreatedBy *User    `json:\"created_by,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-webhookcallback","title":"type WebhookCallback","text":"<p>WebhookCallback represents a webhook callback</p> <pre><code>type WebhookCallback struct {\n    EventName VikunjaWebhookEventType `json:\"event_name\"`\n    Time      string                  `json:\"time\"`\n    Data      WebhookCallbackData     `json:\"data\"`\n}\n</code></pre> <p></p>"},{"location":"Vikunja/#type-webhookcallbackdata","title":"type WebhookCallbackData","text":"<p>WebhookCallbackData represents the data that is sent to a webhook callback</p> <pre><code>type WebhookCallbackData struct {\n    Doer User `json:\"doer\"`\n    Task Task `json:\"task\"`\n}\n</code></pre> <p>Generated by gomarkdoc</p>"}]}